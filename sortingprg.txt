package com.sortingalgorithms;
 
public class BubbleSort {
public void sort(int[] array) {
	int n=array.length;
	for(int i=0;i<n-1;i++) {
		boolean swapped=false;
		for(int j=0;j<n-1-i;j++) {
			if(array[j] > array[j+1]) {
				int temp=array[j];
				array[j]=array[j+1];
				array[j+1]=temp;
				swapped=true;
			}
		}
		if(!swapped) {
			break;
		}
	}
}
}
============================================
package com.sortingalgorithms;
 
//HeapSort.java
public class HeapSort {
public static void sort(int[] arr) {
     int n = arr.length;
 
     // Build heap (rearrange array)
     for (int i = n / 2 - 1; i >= 0; i--) {
         heapify(arr, n, i);
     }
 
     // One by one extract an element from heap
     for (int i = n - 1; i > 0; i--) {
         // Move current root to end
         int temp = arr[0];
         arr[0] = arr[i];
         arr[i] = temp;
 
         // call max heapify on the reduced heap
         heapify(arr, i, 0);
     }
}
 
// To heapify a subtree rooted with node i which is
// an index in arr[]. n is size of heap
private static void heapify(int[] arr, int n, int i) {
     int largest = i; // Initialize largest as root
     int left = 2 * i + 1; // left = 2*i + 1
     int right = 2 * i + 2; // right = 2*i + 2
 
     // If left child is larger than root
     if (left < n && arr[left] > arr[largest]) {
         largest = left;
     }
 
     // If right child is larger than largest so far
     if (right < n && arr[right] > arr[largest]) {
         largest = right;
     }
 
     // If largest is not root
     if (largest != i) {
         int swap = arr[i];
         arr[i] = arr[largest];
         arr[largest] = swap;
 
         // Recursively heapify the affected sub-tree
         heapify(arr, n, largest);
     }
}
}
 
=======================
package com.sortingalgorithms;
 
//MergeSort.java
public class MergeSort {
public static void sort(int[] arr) {
     if (arr == null || arr.length <= 1) {
         return;
     }
     mergeSort(arr, 0, arr.length - 1);
}
 
private static void mergeSort(int[] arr, int left, int right) {
     if (left < right) {
         int mid = (left + right) / 2;
         mergeSort(arr, left, mid);
         mergeSort(arr, mid + 1, right);
         merge(arr, left, mid, right);
     }
}
 
private static void merge(int[] arr, int left, int mid, int right) {
     int n1 = mid - left + 1;
     int n2 = right - mid;
 
     int[] L = new int[n1];
     int[] R = new int[n2];
 
     for (int i = 0; i < n1; ++i) {
         L[i] = arr[left + i];
     }
     for (int j = 0; j < n2; ++j) {
         R[j] = arr[mid + 1 + j];
     }
 
     int i = 0, j = 0;
     int k = left;
     while (i < n1 && j < n2) {
         if (L[i] <= R[j]) {
             arr[k] = L[i];
             i++;
         } else {
             arr[k] = R[j];
             j++;
         }
         k++;
     }
 
     while (i < n1) {
         arr[k] = L[i];
         i++;
         k++;
     }
 
     while (j < n2) {
         arr[k] = R[j];
         j++;
         k++;
     }
}
}
====================
package com.sortingalgorithms;
public class QuickSort {
    public static void sort(int[] arr) {
        if (arr == null || arr.length == 0) {
            return;
        }
        quickSort(arr, 0, arr.length - 1);
    }
 
    private static void quickSort(int[] arr, int low, int high) {
        if (low < high) {
            int pi = partition(arr, low, high);
            quickSort(arr, low, pi - 1);
            quickSort(arr, pi + 1, high);
        }
    }
 
    private static int partition(int[] arr, int low, int high) {
        int pivot = arr[high];
        int i = (low - 1);
        for (int j = low; j < high; j++) {
            if (arr[j] < pivot) {
                i++;
                int temp = arr[i];
                arr[i] = arr[j];
                arr[j] = temp;
            }
        }
        int temp = arr[i + 1];
        arr[i + 1] = arr[high];
        arr[high] = temp;
 
        return i + 1;
    }
}
==============
package com.sortingalgorithms;
 
import java.util.Arrays;
 
public class SortDemo {
 
	public static void main(String[] args) {
		/*// TODO Auto-generated method stub
BubbleSort bubblesort=new BubbleSort();
int[] array= {64,34,25,12,11,22,90};
System.out.println("Unsorted Array:"+Arrays.toString(array));
bubblesort.sort(array);
System.out.println("sorted Array:"+Arrays.toString(array));
*/
		// SortDemo.java
		/*
		        int[] arr = {64, 34, 25, 12, 22, 11, 90};
		        System.out.println("Original array:");
		        printArray(arr);
 
		        QuickSort.sort(arr);
 
		        System.out.println("\nSorted array:");
		        printArray(arr);
		    }
 
		    private static void printArray(int[] arr) {
		        for (int value : arr) {
		            System.out.print(value + " ");
		        }
		        System.out.println();
		   */
		// SortDemo.java
		    /* int[] arr = {64, 34, 25, 12, 22, 11, 90};
		        System.out.println("Original array:");
		        printArray(arr);
 
		        MergeSort.sort(arr);
 
		        System.out.println("\nSorted array:");
		        printArray(arr);
		    }
 
		    private static void printArray(int[] arr) {
		        for (int value : arr) {
		            System.out.print(value + " ");
		        }
		        System.out.println();*/
		// SortDemo.java
		     int[] arr = {64, 34, 25, 12, 22, 11, 90};
		        System.out.println("Original array:");
		        printArray(arr);
 
		        HeapSort.sort(arr);
 
		        System.out.println("\nSorted array:");
		        printArray(arr);
		    }
 
		    private static void printArray(int[] arr) {
		        for (int value : arr) {
		            System.out.print(value + " ");
		        }
		        System.out.println();

	}
 
}